;;-*-Lisp-*-
(in-package goal)

(deftype test-actor (process-drawable)
  ((root           collide-shape-moving :override)
   (basetrans      vector :inline))
  (:methods
   (init-collision! (_type_) none)
   (active () _type_ :state)))

(defstate active (test-actor)
  :virtual #t
  :enter (behavior ()
    (ja :group! (-> self draw art-group data 2)))
  :trans rider-trans
  :code (behavior ()
    (loop
      (ja :num! (loop! (+ 0.0 (* (seconds-per-frame) 60))))
      (suspend)))
  :post rider-post)

(deftype WrongBoneVisualsMisaligned (test-actor)
  ())

(def-art-elt WrongBoneVisualsMisaligned-ag WrongBoneVisualsMisaligned-lod0-jg 0)
(def-art-elt WrongBoneVisualsMisaligned-ag WrongBoneVisualsMisaligned-lod0-mg 1)
(def-art-elt WrongBoneVisualsMisaligned-ag WrongBoneVisualsMisaligned-active-ja 2)

(defskelgroup *WrongBoneVisualsMisaligned-sg* WrongBoneVisualsMisaligned WrongBoneVisualsMisaligned-lod0-jg WrongBoneVisualsMisaligned-active-ja
  ((WrongBoneVisualsMisaligned-lod0-mg (meters 9999999)))
  :bounds (static-spherem 0.0 0.84 0.0 2.32))

(defmethod init-collision! ((this WrongBoneVisualsMisaligned))
  (let ((s5-0 (new 'process 'collide-shape-moving this (collide-list-enum hit-by-player))))
    (set! (-> s5-0 dynam) (copy *standard-dynamics* 'process))
    (set! (-> s5-0 reaction) default-collision-reaction)
    (set! (-> s5-0 no-reaction) (the-as (function collide-shape-moving collide-shape-intersect vector vector none) nothing))
    (alloc-riders s5-0 1)
    (let ((s4-0 (new 'process 'collide-shape-prim-group s5-0 (the-as uint 1) 0)))
      (set! (-> s4-0 prim-core collide-as) (collide-kind ground-object blue-eco-suck))
      (set! (-> s4-0 collide-with) (collide-kind target))
      (set! (-> s4-0 prim-core action) (collide-action solid))
      (set! (-> s4-0 prim-core offense) (collide-offense indestructible))
      (set! (-> s4-0 transform-index) 2)
      (set-vector! (-> s4-0 local-sphere) (meters 0.0) (meters 0.84) (meters 0.0) (meters 2.32))
      (set-root-prim! s5-0 s4-0)
      (let ((s2-0 (new 'process 'collide-shape-prim-mesh s5-0 (the-as uint 0) (the-as uint 0))))
        (set! (-> s2-0 prim-core collide-as) (collide-kind ground-object blue-eco-suck))
        (set! (-> s2-0 collide-with) (collide-kind target))
        (set! (-> s2-0 prim-core action) (collide-action solid))
        (set! (-> s2-0 prim-core offense) (collide-offense indestructible))
        (set! (-> s2-0 transform-index) 4)
        (set-vector! (-> s2-0 local-sphere) (meters 0.0) (meters 2.01) (meters 0.0) (meters 0.82))
        (append-prim s4-0 s2-0)))
    (set! (-> s5-0 nav-radius) (* 0.75 (-> s5-0 root-prim local-sphere w)))
    (backup-collide-with-as s5-0)
    (set! (-> this root) s5-0))
  (none))

(defmethod init-from-entity! ((this WrongBoneVisualsMisaligned) (e entity-actor))
  (init-collision! this)
  (process-drawable-from-entity! this e)
  (set! (-> this basetrans quad) (-> this root trans quad))
  (set! (-> this link) (new 'process 'actor-link-info this))
  (initialize-skeleton this *WrongBoneVisualsMisaligned-sg* '())
  (logior! (-> this skel status) (janim-status inited))
  (set! (-> this draw origin-joint-index) 2)
  (transform-post)
  (go (method-of-object this active))
  (none))

(deftype WrongBoneVisualsAligned (test-actor)
  ())

(def-art-elt WrongBoneVisualsAligned-ag WrongBoneVisualsAligned-lod0-jg 0)
(def-art-elt WrongBoneVisualsAligned-ag WrongBoneVisualsAligned-lod0-mg 1)
(def-art-elt WrongBoneVisualsAligned-ag WrongBoneVisualsAligned-active-ja 2)

(defskelgroup *WrongBoneVisualsAligned-sg* WrongBoneVisualsAligned WrongBoneVisualsAligned-lod0-jg WrongBoneVisualsAligned-active-ja
  ((WrongBoneVisualsAligned-lod0-mg (meters 9999999)))
  :bounds (static-spherem 0.0 0.14 0.14 1.98))

(defmethod init-collision! ((this WrongBoneVisualsAligned))
  (let ((s5-0 (new 'process 'collide-shape-moving this (collide-list-enum hit-by-player))))
    (set! (-> s5-0 dynam) (copy *standard-dynamics* 'process))
    (set! (-> s5-0 reaction) default-collision-reaction)
    (set! (-> s5-0 no-reaction) (the-as (function collide-shape-moving collide-shape-intersect vector vector none) nothing))
    (alloc-riders s5-0 1)
    (let ((s4-0 (new 'process 'collide-shape-prim-group s5-0 (the-as uint 1) 0)))
      (set! (-> s4-0 prim-core collide-as) (collide-kind ground-object blue-eco-suck))
      (set! (-> s4-0 collide-with) (collide-kind target))
      (set! (-> s4-0 prim-core action) (collide-action solid))
      (set! (-> s4-0 prim-core offense) (collide-offense indestructible))
      (set! (-> s4-0 transform-index) 2)
      (set-vector! (-> s4-0 local-sphere) (meters 0.0) (meters 0.14) (meters 0.14) (meters 1.98))
      (set-root-prim! s5-0 s4-0)
      (let ((s2-0 (new 'process 'collide-shape-prim-mesh s5-0 (the-as uint 0) (the-as uint 0))))
        (set! (-> s2-0 prim-core collide-as) (collide-kind ground-object blue-eco-suck))
        (set! (-> s2-0 collide-with) (collide-kind target))
        (set! (-> s2-0 prim-core action) (collide-action solid))
        (set! (-> s2-0 prim-core offense) (collide-offense indestructible))
        (set! (-> s2-0 transform-index) 4)
        (set-vector! (-> s2-0 local-sphere) (meters 0.0) (meters 0.0) (meters 0.0) (meters 0.82))
        (append-prim s4-0 s2-0)))
    (set! (-> s5-0 nav-radius) (* 0.75 (-> s5-0 root-prim local-sphere w)))
    (backup-collide-with-as s5-0)
    (set! (-> this root) s5-0))
  (none))

(defmethod init-from-entity! ((this WrongBoneVisualsAligned) (e entity-actor))
  (init-collision! this)
  (process-drawable-from-entity! this e)
  (set! (-> this basetrans quad) (-> this root trans quad))
  (set! (-> this link) (new 'process 'actor-link-info this))
  (initialize-skeleton this *WrongBoneVisualsAligned-sg* '())
  (logior! (-> this skel status) (janim-status inited))
  (set! (-> this draw origin-joint-index) 2)
  (transform-post)
  (go (method-of-object this active))
  (none))

(deftype MultipleMaterials (test-actor)
  ())

(def-art-elt MultipleMaterials-ag MultipleMaterials-lod0-jg 0)
(def-art-elt MultipleMaterials-ag MultipleMaterials-lod0-mg 1)
(def-art-elt MultipleMaterials-ag MultipleMaterials-active-ja 2)

(defskelgroup *MultipleMaterials-sg* MultipleMaterials MultipleMaterials-lod0-jg MultipleMaterials-active-ja
  ((MultipleMaterials-lod0-mg (meters 9999999)))
  :bounds (static-spherem 0.01 6.86 0.0 18.43))

(defmethod init-collision! ((this MultipleMaterials))
  (let ((s5-0 (new 'process 'collide-shape-moving this (collide-list-enum hit-by-player))))
    (set! (-> s5-0 dynam) (copy *standard-dynamics* 'process))
    (set! (-> s5-0 reaction) default-collision-reaction)
    (set! (-> s5-0 no-reaction) (the-as (function collide-shape-moving collide-shape-intersect vector vector none) nothing))
    (alloc-riders s5-0 1)
    (let ((s4-0 (new 'process 'collide-shape-prim-group s5-0 (the-as uint 2) 0)))
      (set! (-> s4-0 prim-core collide-as) (collide-kind ground-object blue-eco-suck))
      (set! (-> s4-0 collide-with) (collide-kind target))
      (set! (-> s4-0 prim-core action) (collide-action solid))
      (set! (-> s4-0 prim-core offense) (collide-offense indestructible))
      (set! (-> s4-0 transform-index) 2)
      (set-vector! (-> s4-0 local-sphere) (meters 0.01) (meters 6.86) (meters 0.0) (meters 18.43))
      (set-root-prim! s5-0 s4-0)
      (let ((s2-0 (new 'process 'collide-shape-prim-mesh s5-0 (the-as uint 0) (the-as uint 0))))
        (set! (-> s2-0 prim-core collide-as) (collide-kind ground-object blue-eco-suck))
        (set! (-> s2-0 collide-with) (collide-kind target))
        (set! (-> s2-0 prim-core action) (collide-action solid))
        (set! (-> s2-0 prim-core offense) (collide-offense indestructible))
        (set! (-> s2-0 transform-index) 2)
        (set-vector! (-> s2-0 local-sphere) (meters 3.56) (meters 1.25) (meters -6.06) (meters 10.51))
        (append-prim s4-0 s2-0))
      (let ((s2-1 (new 'process 'collide-shape-prim-mesh s5-0 (the-as uint 1) (the-as uint 0))))
        (set! (-> s2-1 prim-core collide-as) (collide-kind ground-object blue-eco-suck))
        (set! (-> s2-1 collide-with) (collide-kind target))
        (set! (-> s2-1 prim-core action) (collide-action solid))
        (set! (-> s2-1 prim-core offense) (collide-offense indestructible))
        (set! (-> s2-1 transform-index) 2)
        (set-vector! (-> s2-1 local-sphere) (meters 0.0) (meters 1.25) (meters 0.52) (meters 16.79))
        (append-prim s4-0 s2-1)))
    (set! (-> s5-0 nav-radius) (* 0.75 (-> s5-0 root-prim local-sphere w)))
    (backup-collide-with-as s5-0)
    (set! (-> this root) s5-0))
  (none))

(defmethod init-from-entity! ((this MultipleMaterials) (e entity-actor))
  (init-collision! this)
  (process-drawable-from-entity! this e)
  (set! (-> this basetrans quad) (-> this root trans quad))
  (set! (-> this link) (new 'process 'actor-link-info this))
  (initialize-skeleton this *MultipleMaterials-sg* '())
  (logior! (-> this skel status) (janim-status inited))
  (set! (-> this draw origin-joint-index) 2)
  (transform-post)
  (go (method-of-object this active))
  (none))

(deftype AttachToDaxter (test-actor)
  ())

(def-art-elt AttachToDaxter-ag AttachToDaxter-lod0-jg 0)
(def-art-elt AttachToDaxter-ag AttachToDaxter-lod0-mg 1)
(def-art-elt AttachToDaxter-ag AttachToDaxter-active-ja 2)

(defskelgroup *AttachToDaxter-sg* AttachToDaxter AttachToDaxter-lod0-jg AttachToDaxter-active-ja
  ((AttachToDaxter-lod0-mg (meters 9999999)))
  :bounds (static-spherem -8.88 0.93 7.57 2.23))

(defmethod init-collision! ((this AttachToDaxter))
  (let ((s5-0 (new 'process 'collide-shape-moving this (collide-list-enum hit-by-player))))
    (set! (-> s5-0 dynam) (copy *standard-dynamics* 'process))
    (set! (-> s5-0 reaction) default-collision-reaction)
    (set! (-> s5-0 no-reaction) (the-as (function collide-shape-moving collide-shape-intersect vector vector none) nothing))
    (alloc-riders s5-0 1)
    (let ((s4-0 (new 'process 'collide-shape-prim-group s5-0 (the-as uint 1) 0)))
      (set! (-> s4-0 prim-core collide-as) (collide-kind ground-object blue-eco-suck))
      (set! (-> s4-0 collide-with) (collide-kind target))
      (set! (-> s4-0 prim-core action) (collide-action solid))
      (set! (-> s4-0 prim-core offense) (collide-offense indestructible))
      (set! (-> s4-0 transform-index) 2)
      (set-vector! (-> s4-0 local-sphere) (meters -8.88) (meters 0.93) (meters 7.57) (meters 2.23))
      (set-root-prim! s5-0 s4-0)
      (let ((s2-0 (new 'process 'collide-shape-prim-mesh s5-0 (the-as uint 0) (the-as uint 0))))
        (set! (-> s2-0 prim-core collide-as) (collide-kind ground-object blue-eco-suck))
        (set! (-> s2-0 collide-with) (collide-kind target))
        (set! (-> s2-0 prim-core action) (collide-action solid))
        (set! (-> s2-0 prim-core offense) (collide-offense indestructible))
        (set! (-> s2-0 transform-index) 2)
        (set-vector! (-> s2-0 local-sphere) (meters 0.0) (meters 0.0) (meters 0.0) (meters 1.73))
        (append-prim s4-0 s2-0)))
    (set! (-> s5-0 nav-radius) (* 0.75 (-> s5-0 root-prim local-sphere w)))
    (backup-collide-with-as s5-0)
    (set! (-> this root) s5-0))
  (none))

(defmethod init-from-entity! ((this AttachToDaxter) (e entity-actor))
  (init-collision! this)
  (process-drawable-from-entity! this e)
  (set! (-> this basetrans quad) (-> this root trans quad))
  (set! (-> this link) (new 'process 'actor-link-info this))
  (initialize-skeleton this *AttachToDaxter-sg* '())
  (logior! (-> this skel status) (janim-status inited))
  (set! (-> this draw origin-joint-index) 2)
  (transform-post)
  (go (method-of-object this active))
  (none))

